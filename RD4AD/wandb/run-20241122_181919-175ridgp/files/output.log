
Training T-S model on strawberry
strawberry epochs:   0%|                                                       | 0/100 [00:00<?, ?epoch/s]
strawberry epochs:   0%|                                                       | 0/100 [00:02<?, ?epoch/s]
Traceback (most recent call last):
  File "/home/zeddo123/anom/RD4AD/easy_train.py", line 122, in <module>
    test(args, c)
  File "/home/zeddo123/anom/RD4AD/easy_train.py", line 80, in test
    loss.backward()
  File "/home/zeddo123/anom/RD4AD/venv/lib/python3.12/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/home/zeddo123/anom/RD4AD/venv/lib/python3.12/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/home/zeddo123/anom/RD4AD/venv/lib/python3.12/site-packages/torch/autograd/graph.py", line 768, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 120.00 MiB. GPU 0 has a total capacity of 23.55 GiB of which 42.44 MiB is free. Process 1057297 has 12.14 GiB memory in use. Including non-PyTorch memory, this process has 11.35 GiB memory in use. Of the allocated memory 10.43 GiB is allocated by PyTorch, and 489.07 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)