
Training T-S model on candle
epoch [1/150], loss:0.5780
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 1, 256, 256])
torch.Size([1, 3, 256, 256]) torch.Size([1]) torch.Size([1, 3, 256, 256])
Traceback (most recent call last):
  File "/home/zeddo123/anom/RD4AD/easy_train.py", line 114, in <module>
    test(args, c)
  File "/home/zeddo123/anom/RD4AD/easy_train.py", line 85, in test
    auroc_px, auroc_sp, aupro_px, table, roc, pr = evaluation(encoder, bn, decoder, test_loader, device, _class_=_class_)
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zeddo123/anom/RD4AD/test.py", line 94, in evaluation
    aupro_list.append(compute_pro(gt.squeeze(0).cpu().numpy().astype(int),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/zeddo123/anom/RD4AD/test.py", line 372, in compute_pro
    assert amaps.shape == masks.shape, f"amaps.shape and masks.shape must be same {amaps.shape} {masks.shape}"
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: amaps.shape and masks.shape must be same (1, 256, 256) (3, 256, 256)